return function()
  local mock = require("deftest.mock.mock")
  local utils = require("modules.utils")

  describe("utils", function()
    describe("starts_with", function()
      it("returns true if string starts with", function()
        assert_true(utils.starts_with("abcde", "ab"))
      end)

      it("returns false if string does not start with", function()
        assert_false(utils.starts_with("abcde", "bc"))
      end)
    end)

    describe("ends_with", function()
      it("returns true if string ends with", function()
        assert_true(utils.ends_with("abcde", "de"))
      end)

      it("returns false if string does not end with", function()
        assert_false(utils.ends_with("abcde", "cd"))
      end)
    end)

    describe("map", function()
      it("returns the mapped array", function()
        local function func(i)
          return i * 2
        end
        assert_same({ 2, 4, 6 }, utils.map({ 1, 2, 3 }, func))
      end)
    end)

    describe("ignore_first", function()
      it("returns a function that ignores its first argument", function()
        local func = utils.ignore_first(function(a)
          return a
        end)
        assert_equal(2, func(1, 2))
      end)
    end)

    describe("memoize", function()
      it("returns a memoized version of a function without arguments", function()
        mock.mock(sys)
        sys.get_sys_info.always_returns({ system_name = "Linux" })
        local func = utils.memoize(function()
          return sys.get_sys_info().system_name
        end)
        assert_equal("Linux", func())
        assert_equal("Linux", func())
        assert_equal("Linux", func())
        assert_equal(1, sys.get_sys_info.calls)
        mock.unmock(sys)
      end)

      it("returns a memoized version of a function with one argument", function()
        mock.mock(sys)
        sys.get_sys_info.always_returns({ system_name = "Linux" })
        local func = utils.memoize(function(a)
          return sys.get_sys_info().system_name .. a
        end)
        assert_equal("Linux42", func("42"))
        assert_equal("Linux42", func("42"))
        assert_equal("Linux43", func("43"))
        assert_equal(2, sys.get_sys_info.calls)
        mock.unmock(sys)
      end)

      it("returns a memoized version of a function with multiple arguments", function()
        mock.mock(sys)
        sys.get_sys_info.always_returns({ system_name = "Linux" })
        local func = utils.memoize(function(a, b)
          return sys.get_sys_info().system_name .. a .. b
        end)
        assert_equal("Linux42", func("4", "2"))
        assert_equal("Linux42", func("4", "2"))
        assert_equal("Linux43", func("4", "3"))
        assert_equal(2, sys.get_sys_info.calls)
        mock.unmock(sys)
      end)
    end)

    describe("version", function()
      it("returns a version string", function()
        local pattern = "%w+ v%d%.%d%.%d%-development\nDefold v%d%.%d%.%d %(%w+%)"
        assert_match(pattern, utils.version())
      end)
    end)

    describe("is_debug", function()
      it("returns true if this is a debug build", function()
        mock.mock(sys)
        sys.get_engine_info.always_returns({ is_debug = true })
        assert_true(utils.is_debug())
        mock.unmock(sys)
      end)

      it("returns false if this is not a debug build", function()
        mock.mock(sys)
        sys.get_engine_info.always_returns({ is_debug = false })
        assert_false(utils.is_debug())
        mock.unmock(sys)
      end)
    end)

    describe("platform", function()
      it("returns the platform name", function()
        mock.mock(sys)
        sys.get_sys_info.always_returns({ system_name = "Linux" })
        assert_equal("Linux", utils.platform())
        mock.unmock(sys)
      end)
    end)

    describe("save_path", function()
      it("returns the save path for a file when platform is not Linux", function()
        mock.mock(sys)
        sys.get_config.always_returns("My Awesome App!")
        sys.get_sys_info.always_returns({ system_name = "Windows" })
        sys.get_save_file.replace(function(dirname, filename)
          return "some/path/" .. dirname .. "/" .. filename
        end)
        assert_equal("some/path/MyAwesomeApp/config.txt", utils.save_path("config.txt"))
        mock.unmock(sys)
      end)

      it("returns the save path for a file when platform is Linux", function()
        mock.mock(sys)
        sys.get_config.always_returns("My Awesome App!")
        sys.get_sys_info.always_returns({ system_name = "Linux" })
        sys.get_save_file.replace(function(dirname, filename)
          return "some/path/" .. dirname .. "/" .. filename
        end)
        assert_equal("some/path/config/MyAwesomeApp/config.txt", utils.save_path("config.txt"))
        mock.unmock(sys)
      end)
    end)

    describe("quit", function()
      it("exits with 0 when platform is not HTML5", function()
        mock.mock(sys)
        sys.get_sys_info.always_returns({ system_name = "Linux" })
        utils.quit()
        assert_equal(1, sys.exit.calls)
        mock.unmock(sys)
      end)

      it("does nothing when platform is HTML5", function()
        mock.mock(sys)
        sys.get_sys_info.always_returns({ system_name = "HTML5" })
        utils.quit()
        assert_equal(0, sys.exit.calls)
        mock.unmock(sys)
      end)
    end)
  end)
end
